package sg.edu.nus.wing.qanus.mitic.eval;


import sg.edu.nus.wing.qanus.framework.commons.IRegisterableModule;
import sg.edu.nus.wing.qanus.framework.commons.IXMLParser;
import sg.edu.nus.wing.qanus.framework.eval.FrameworkController;


/**
 * mitic implementation of Controller module of the evaluation stage.
 * Compares results generated by QANUS and a gold-standard set.
 *
 * This Controller is the entry point for the evaluation stage.
 *
 * This can be a reference implementation for your own customised evaluation
 * components.
 *
 * @author NG, Jun Ping -- junping@comp.nus.edu.sg
 * @version Jan 16, 2010
 */
public class Controller extends FrameworkController {

	// For the eval.FrameworkController
	// Notes:
	/*
	 * When creating your XML handlers and modules to customise this portion, you
	 * may need this info read in from the command line:
	 * GetSourceFile1() gives the file containing generated answers.
	 * GetSourceFile2() gives the file containing the gold-standard answers
	 * GetTargetFile() gives the folder to save the evaluation results in
	 */


	/**
	 * First customisable part of the controller.
	 * Prepares and returns the XML handler to be used by the StageEngine for this Controller.
	 * For this StageEngine -- evaluation --- 2 XML parsers are used
	 *  1. the XML parser for the generated answers file
	 *  2. the XML parser for the gold-standard answer file
	 *
	 * @return array of XML handlers to use for the StageEngine
	 */
	@Override
	public IXMLParser[] GetXMLHandlersForStageEngine() {

		IXMLParser[] l_Array = new IXMLParser[2];
		
		l_Array[0] = new GeneratedAnswersXMLParser();
		l_Array[1] = new CorrectAnswersXMLParser();
		
		return l_Array;

	} // end GetXMLHandlerForStageEngine()



	/**
	 * Seconde customisable part of the controller.
	 * Prepares and returns the modules to be invoked by the StageEngine.
	 * For this StageEngine -- evaluation -- the modules would be the evaluation
	 * metrics to score the generated answers with
	 * 
	 * @return array of modules to be invoked.
	 */
	@Override
	public IRegisterableModule[] GetModulesForStageEngine() {

		// Calculates precision for factoid modules
		FactoidPrecisionMetric l_Module = new FactoidPrecisionMetric(); 

		IRegisterableModule[] l_Array = new IRegisterableModule[1];
		l_Array[0] = l_Module;

		return l_Array;

	} // end GetModulesForStageEngine()




	/**
	 * Entry point function.
	 * You don't have to change this usually, so you can just copy this to make your own
	 * Controller.
	 *
	 * @param args
	 */
	public static void main(String args[]) {

		// --------------------------------------------------------
		// Start up an instance of the controller, and invoke it to get the machinery going
		// This illustrates the standard way this can be done. When creating your own
		// Controller, or customising it for your needs, you can take this as a reference
		// implementation.
		Controller l_Ctr = new Controller();

		// If a log is desired, uncomment this. When this is commented, log messages
		// are not saved to any file
		//l_Ctr.SetUpLog();


		// This call will jump-start the machinery. Must be called, else nothing will happen!
		if (!l_Ctr.Entry(args)) {
			// An error happened
			// Fix it if you want
		} else {
			// Successfull invoked engine.
			// Any post-processing?
		}


		// --------------------


	} // end main()


} // end class
